#################################################
# Playbook: Wordpress on Ubuntu 18.04/20.04 LAMP
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml
    ###Fichero de definición de variables para nuestro playbook

  tasks:
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
      tags: [ system ]
      ###Instalamos "aptitude" como gestor de paquetes preferente a "apt"

    - name: Install LAMP Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php' ]
      tags: [ system ]
      ###Instalamos los paquetes necesarios para la pila LAMP

    - name: Install WordPress PHP Extensions
      apt: name={{ item }} update_cache=yes state=latest
      loop: "{{ php_modules }}"
      tags: [ system ]
      ###Instalamos las extensiones de PHP necesarias para la configuración de WordPress
      ###dichas extensiones están definidas en la variable "{{ php_modules }}" en el fichero
      ###de definición de variables "vars/default"

  # Apache Configuration
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [ apache ]
      ###Creamos el directorio para el "VirtualHost", asignamos propietario, grupo y permisos de directorio

    - name: Set up Apache VirtualHost
      template:
        src: "files/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache
      tags: [ apache ]
      ###Copiamos la plantilla de configuracion de nuestro "VirtualHost" al directorio "sites-available" 
      ###donde residen las configuraciones de los websites disponibles para Apache y llamamos al "handler"
      ###"Reload Apache" para volver a cargar la configuración del servidor.

    - name: Enable rewrite module
      shell: /usr/sbin/a2enmod rewrite
      notify: Reload Apache
      tags: [ apache ]
      ###Activamos el módulo "mod_rewrite" de Apache, https://httpd.apache.org/docs/2.4/en/mod/mod_rewrite.html

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache
      tags: [ apache ]

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      notify: Restart Apache
      tags: [ apache ]
      ###Por último activamos nuestro sitio web ("VirtualHost") y desactivamos el website de Apache por defecto.

  # MySQL Configuration
    - name: Set the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock ###Ruta al socket en sistemas Unix para conexiones locales.
      tags: [ mysql, mysql-root ]

    - name: Remove all anonymous user accounts
      mysql_user:
        name: ''    ###Cuenta de usuario anonima.
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]
      ###https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_user_module.html

    - name: Remove the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]
      ###https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_db_module.html

    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"    ###Creamos usuario/contraseña de MySQL para WordPress
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"    ###Se otorgan todos los privilegios en la base de datos "wordpress"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]
      ###https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_user_module.html

  # UFW Configuration
    #- name: "UFW - Allow HTTP on port {{ http_port }}"
    #  ufw:
    #    rule: allow
    #    port: "{{ http_port }}"
    #    proto: tcp
    #  tags: [ system ]

  # WordPress Configuration
    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes     ###Configure "remote_src = yes" para descomprimir un archivo que ya existe en el destino.
        creates: "/var/www/{{ http_host }}/wordpress"   ###Si la ruta absoluta especificada (archivo o directorio) ya existe, este paso no se ejecutará.
      tags: [ wordpress ]
      ###https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes    ###Establece de forma recursiva los atributos especificados en el directorio y su contenido. Solamente aplicable cuando "state=directory".
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]
      ###Se establece propietario (owner/group) del directorio correspondiente al website y se establecen los permisos para directorios (750)
      ###y para los ficheros (640).
      ###https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html
      ###https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]
      ###https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
  ###https://docs.ansible.com/ansible/latest/user_guide/playbooks_handlers.html
  ###https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html
